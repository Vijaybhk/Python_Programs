# *************************
#     Movie Analyzer
# *************************

import json
import sys

import xmltodict
import wordcloud
import textblob
import requests
import matplotlib.pyplot as plt
import skimage.io


def correct_spelling(word):
    """
    Function to the correct the spelling of the input word using TextBlob.correct()

    Parameters
    ------------
        word: str
            Input word that needs to be corrected

    Returns
    ------------
    blob.correct(): str
        Corrected word by spelling for the input word

    """
    blob = textblob.TextBlob(word)
    return blob.correct()


# This function has been again from my first assignment.
def seek_response():
    """
    Function to Seek response from user whether to run any further analysis or not

    Parameters
    ----------------
        -

    Returns
    ----------------
    get_movie_analytics()
        If user response is yes

    None
        Ends program if user response is no

    seek_response()
        neither yes nor no, then seeks response from user again

    """
    # seeking response from user. validates case and whitespaces.
    get_response = input("\nWould you like to run any another analysis (yes/no)? ").lower().strip()

    # Corrects input from user using textblob correct
    response_from_user = correct_spelling(get_response)

    # If user response is yes, executes analysis function
    if response_from_user == "yes":
        return get_movie_analysis()

    # If user response is no, ends the entire program
    elif response_from_user == "no":
        return

    # If user is response is not among yes or no, seeks user response again to proceed.
    else:
        print("\nInvalid Input. Enter only yes or no.")
        return seek_response()


def get_poster(url):
    """
    Function to get poster image from the url which has it
    Shows the image if it could be found from the url
    Otherwise, prints it could not find anything and
    print the error type.

    Parameters
    ----------------
        url: str
            URL of the poster image

    Returns
    ----------------
        seek_response()
            Calls seek_response() function after the function is executed

    """
    try:
        image = skimage.io.imread(url)
        plt.imshow(image, interpolation="bilinear")
        plt.axis("off")
        plt.show()
    except Exception as error:
        print("\nCould not find any poster for this movie")
        print(type(error))
    return seek_response()


def get_wordcloud_or_sentiment(movie, analysis=None):
    """
    Function to get wordcloud or sentiment from the IMDB reviews stored in MIS515 API
    reading from the json format.
    Wordcloud is generated by combining all the text in the reviews.
    Sentiment is calculated for all the reviews and then averaged.

    Parameters
    ----------------
        movie: str
            name of the movie to collect its reviews from the api

        analysis: str | None
            Type of analysis either "wordcloud" or "sentiment"

    """

    response2 = requests.get(f"https://dgoldberg.sdsu.edu/515/imdb/{movie}.json")

    # Checks connection
    if response2:

        # Loading the json from the api response
        data = json.loads(response2.text)

        # Empty reviews list and str
        reviews = []
        review_text = " "

        # Loops through all reviews and joins them in a list and as a string
        for i in data:
            review = i["Review text"]
            reviews.append(review)
            review_text += review

        # If wordcloud is required, creates it using the combined review string
        if analysis == "wordcloud":
            cloud = wordcloud.WordCloud(background_color="white", colormap="rainbow", random_state=0)
            cloud.generate(review_text)

            plt.imshow(cloud, interpolation="bilinear")
            plt.axis("off")
            plt.show()

        # If sentiment is required, computes the average by looping through each of the review
        elif analysis == "sentiment":
            polarity = 0
            subjectivity = 0
            for k in reviews:
                blob = textblob.TextBlob(k)
                polarity += blob.polarity
                subjectivity += blob.subjectivity

            avg_polarity = polarity / len(reviews)
            avg_subjectivity = subjectivity / len(reviews)

            print(f"Average IMDB review polarity: {avg_polarity}")
            print(f"Average IMDB review subjectivity: {avg_subjectivity}")

    else:
        # Error message if the movie reviews could not be found.
        print("\nSorry, the tool could not successfully load any " +
              "IMDb reviews for this movie. Please try another analysis or movie.")
    return seek_response()


def get_movie_analysis():
    """
    Function to do the movie analysis

    Parameters
    --------------
         -

    Returns
    --------------
        None

    """

    # Get the Input movie name from user, clear it for extra spaces and convert case to lower
    movie_name = input("\nWhat movie would you like to analyze? ").lower().strip()

    # Get the analysis type from user
    get_type = input(
        "What would you like to see " +
        "(background/reception/poster/wordcloud/sentiment)? "
    ).lower().strip()

    # Correct the spelling of the analysis user requested before proceeding
    type_from_user = correct_spelling(get_type)

    # Handle errors
    try:

        # Checks if it needs IMDB API or MIS 515
        if type_from_user in ["background", "reception", "poster"]:
            api_key = "8dfafdb6"
            response = requests.get(f"https://www.omdbapi.com/?r=xml&apikey={api_key}&t={movie_name}")

            # Gets response and movie information, Outputs as per the analysis type
            if response:
                xml_data = xmltodict.parse(response.text)
                movie = xml_data["root"]["movie"]
                # print(movie)

                if type_from_user == "background":
                    year = movie["@year"]
                    rated = movie["@rated"]
                    runtime = movie["@runtime"]
                    genre = movie["@genre"]
                    actors = movie["@actors"]
                    plot = movie["@plot"]
                    print(f"\nYear: {year}\nRating:{rated}\nRuntime: {runtime}\nGenre: {genre}")
                    print(f"Actors: {actors}\nPlot: {plot}")
                    seek_response()

                elif type_from_user == "reception":
                    awards = movie["@awards"]
                    meta = movie["@metascore"]
                    imdb = movie["@imdbRating"]
                    print(f"\nAwards: {awards}\nMetascore: {meta}\nIMDB rating: {imdb}")
                    seek_response()

                elif type_from_user == "poster":
                    poster_url = movie["@poster"]
                    get_poster(poster_url)

            else:
                print("\nSorry, Connection error! ")
                seek_response()

        # Connects to MIS 515 api and gets wordcloud or sentiment as per the analysis input
        elif type_from_user == "wordcloud":
            get_wordcloud_or_sentiment(movie_name, "wordcloud")

        elif type_from_user == "sentiment":
            get_wordcloud_or_sentiment(movie_name, "sentiment")

        else:
            print("\nSorry, that analysis is not supported. Please try again.")
            seek_response()

    except Exception as error:
        print("Sorry, Connection error or Movie does not exist in this tool!")
        print(type(error))
        seek_response()

    return


def main():
    print("Welcome to the movie analytics tool!")
    get_movie_analysis()

    return


if __name__ == "__main__":
    sys.exit(main())
